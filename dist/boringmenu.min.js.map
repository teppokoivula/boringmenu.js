{"mappings":"C,A,WEAA,YDEA,CAAA,OAAO,UAAU,CCKF,MAOd,YAAY,EAAU,CAAC,CAAC,CAAE,CAgDzB,GA7CA,IAAI,CAAC,cAAc,CAAG,CACrB,UAAW,CACV,KAAM,cACN,KAAM,aACP,EACA,QAAS,CACR,KAAM,mBACN,WAAY,2BACZ,WAAY,2BACZ,OAAQ,qBACR,oBAAqB,sBACrB,OAAQ,EACT,EACA,OAAQ,CACP,YAAa,OACb,aAAc,OACf,EACA,MAAO,CACN,YAAa,cACb,aAAc,cACf,EACA,GAAI,cAAgB,IAAI,CAAC,KAAK,GAC9B,KAAM,UACN,KAAM,EACP,EAGA,IAAI,CAAC,SAAS,GAGd,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,YAAY,CAAC,GAG7B,IAAI,CAAC,OAAO,CAAC,OAAO,EACvB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,AAAC,IACtC,AAAqC,UAArC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAI,CACnC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAI,CAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAI,CAAC,KAAK,CAAC,KAClD,AAAC,MAAM,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAI,GAClD,CAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAI,CAAG,EAAE,AAAF,CAE9B,GAID,IAAI,CAAC,IAAI,CAAG,SAAS,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAC1D,CAAC,IAAI,CAAC,IAAI,CAAE,YAEf,SAAS,aAAa,CAAC,IAAI,YAAY,yBAcxC,GATA,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAyB,GAGhD,IAAI,CAAC,OAAO,CAAG,EAGf,IAAI,CAAC,WAAW,CAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAG1B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,mBAC1B,GAAI,CACH,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAoB,IAAI,CAAC,OAAO,EACpG,CAAE,MAAM,EAAG,CAAC,CAIb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAG/C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAG3B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,YAAY,uBAAwB,CAC/D,QAAS,CAAA,EACT,WAAY,CAAA,CACb,GACD,CAQA,WAAW,CAAI,CAAE,CAAO,CAAE,CACzB,IAAM,EAAc,IAAI,CAAC,OAAO,CAAC,IAAI,EAAI,OAAO,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAO,IAAM,IACjF,EAAgB,EAAQ,IAAI,CAAC,GAAG,CAAC,AAAA,GAAa,IAAM,EAAY,UAAY,EAAc,MAChG,EAAK,gBAAgB,CAAC,EAAc,IAAI,CAAC,OAAO,OAAO,CAAC,AAAA,IAGvD,IAFA,EAAK,SAAS,CAAC,GAAG,IAAI,EAAQ,UAAU,EACxC,EAAO,EAAK,UAAU,CACf,EAAK,UAAU,EAErB,GAAI,AAAgB,MAAhB,AADJ,CAAA,EAAO,EAAK,UAAU,AAAV,EACH,OAAO,CAAU,CACzB,IAAM,EAAY,EAAK,iBAAiB,AACpC,AAAc,QAAd,GAAsB,IAAI,CAAC,QAAQ,CAAC,EAAW,EAAQ,IAAI,GAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAW,EAAQ,UAAU,GAC/G,EAAU,SAAS,CAAC,GAAG,IAAI,EAAQ,UAAU,CAE/C,MAAO,GAAI,EAAK,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAClD,KAGH,EACD,CAQA,aAAa,CAAI,CAAE,EAAQ,CAAC,CAAE,CAC7B,EAAK,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,AAAC,IAG3D,IAAM,EAAU,EAAK,aAAa,CAAC,MAC9B,IAGL,IAAI,CAAC,OAAO,GACZ,EAAQ,YAAY,CAAC,KAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAG,IAAM,IAAI,CAAC,OAAO,EAC/D,EAAQ,YAAY,CAAC,wBAAyB,GAG1C,AAAC,IAAI,CAAC,QAAQ,CAAC,EAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,GAAM,EAAK,aAAa,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,GACrH,IAAI,CAAC,SAAS,CAAC,EAAS,CAAA,GAIzB,EAAQ,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,GAAU,GAGzD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAGtB,IAAI,CAAC,YAAY,CAAC,EAAS,EAAQ,GACpC,EACD,CAaA,WAAW,CAAI,CAAE,CAAU,CAAE,CAAc,CAAE,CAAc,CAAE,CAAW,CAAE,EAAe,CAAA,CAAI,CAAE,EAAc,CAAA,CAAK,CAAE,CACnH,IAAI,CAAC,SAAS,CAAC,EAAM,GACrB,EAAK,cAAc,CAAG,EAAK,cAAc,EAAI,KAC7C,EAAW,YAAY,CAAC,gBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,IACxD,EAAe,SAAS,CAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAQ,YAAc,aAAa,CAC1E,MAAlB,IACH,EAAK,cAAc,CAAG,IAAI,CAAC,aAAa,CAAC,GACzC,EAAe,UAAU,CAAC,YAAY,CAAC,EAAK,cAAc,CAAE,IAEzD,AAAC,GAAe,AAAsB,cAAtB,IAAI,CAAC,OAAO,CAAC,IAAI,EACpC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,AAAA,KACpB,CAAA,EAAW,EAAE,GAAK,EAAK,EAAE,EAAI,IAAI,CAAC,QAAQ,CAAC,IAAe,EAAW,QAAQ,CAAC,EAAA,GAAU,EAAW,UAAU,EACjH,IAAI,CAAC,UAAU,CAAC,EAAY,EAAW,UAAU,CAAE,EAAW,cAAc,CAAE,EAAW,cAAc,CAAE,CAAA,EAAM,CAAA,EAAM,CAAA,EACtH,GAEG,GACH,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,YAAY,8BAA+B,CACtE,QAAS,CAAA,EACT,WAAY,CAAA,EACZ,OAAQ,CACP,KAAQ,EACR,UAAa,EAAK,YAAY,CAAC,wBAChC,CACD,GAEF,CAQA,UAAU,CAAO,CAAE,CAGlB,IAAM,EAAa,SAAS,aAAa,CAAC,UAC1C,EAAW,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EACvD,EAAW,YAAY,CAAC,gBAAiB,QACzC,EAAW,YAAY,CAAC,gBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,IACxD,EAAW,YAAY,CAAC,gBAAiB,EAAQ,YAAY,CAAC,OAG9D,IAAM,EAA0B,SAAS,aAAa,CAAC,OACnD,CAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,EAC3C,EAAwB,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,EAElF,EAAW,WAAW,CAAC,GACvB,IAAM,EAAiB,SAAS,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAW,YAAc,aAAa,EACvH,EAAwB,WAAW,CAAC,GAGpC,IAAI,EAAiB,IAAI,CAAC,aAAa,CAAC,GA2BxC,OA1BI,AAAkB,MAAlB,GACH,EAAW,WAAW,CAAC,GAIxB,EAAQ,UAAU,CAAG,EACrB,EAAQ,cAAc,CAAG,EACzB,EAAQ,cAAc,CAAG,EAGzB,EAAW,gBAAgB,CAAC,QAAS,AAAC,IACrC,EAAM,eAAe,GACrB,IAAI,CAAC,UAAU,CAAC,EAAS,EAAQ,UAAU,CAAE,EAAQ,cAAc,CAAE,EAAQ,cAAc,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAC7G,GAGA,EAAW,gBAAgB,CAAC,UAAW,AAAC,IACvC,IAAI,EAEA,CAAC,GAAI,GAAI,GAAI,GAAG,CAAC,OAAO,CAAC,EAAM,OAAO,EAAI,KAC7C,EAAM,cAAc,GACpB,EAAc,AAAkB,KAAlB,EAAM,OAAO,EAAmB,CAAA,AAAkB,KAAlB,EAAM,OAAO,EAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAA3F,EACA,IAAI,CAAC,UAAU,CAAC,EAAS,EAAQ,UAAU,CAAE,EAAQ,cAAc,CAAE,EAAQ,cAAc,CAAE,GAE/F,GAEO,CACR,CASA,cAAc,CAAO,CAAE,CAAc,CAAE,CAEtC,GADA,EAAiB,GAAkB,KAC/B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,EAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAEtE,GAAI,AAAyB,UAAzB,MADJ,CAAA,EAAiB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAW,YAAc,aAAa,AAAb,EACpC,CACtC,IAAM,EAAsB,EAE5B,AADA,CAAA,EAAiB,SAAS,aAAa,CAAC,IAAxC,EACe,YAAY,CAAC,cAAe,CAAA,GAC3C,EAAe,SAAS,CAAC,GAAG,IAAI,EAAoB,KAAK,CAAC,KAC3D,MAAW,MAAM,OAAO,CAAC,IAExB,AADA,CAAA,EAAiB,SAAS,aAAa,CAAC,IAAxC,EACe,YAAY,CAAC,cAAe,CAAA,GAC3C,EAAe,SAAS,CAAC,GAAG,IAAI,IACtB,AAAyB,UAAzB,OAAO,GAA8B,AAAmC,YAAnC,OAAO,EAAe,SAAS,CAC9E,EAAiB,EAAe,SAAS,CAAC,CAAA,GAChC,AAAyB,YAAzB,OAAO,GACjB,CAAA,EAAiB,EAAe,EAAS,EAAQ,YAAY,CAAC,yBADxD,EAIR,OAAO,CACR,CAUA,aAAa,CAAO,CAAE,CAAQ,CAAE,EAAQ,CAAC,CAAE,CACtC,AAAY,MAAZ,GACH,CAAA,EAAW,IAAI,CAAC,cAAc,AAAd,EAEjB,IAAI,EAAO,OAAO,IAAI,CAAC,GACvB,GAAI,CAAC,EAAK,MAAM,CACf,OAAO,EAER,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAAK,CACrC,IAAM,EAAM,CAAI,CAAC,EAAE,AACG,QAAlB,CAAQ,CAAC,EAAI,GACZ,AAAyB,UAAzB,OAAO,CAAQ,CAAC,EAAI,CACvB,OAAO,MAAM,CAAC,CAAO,CAAC,EAAI,CAAE,IAAI,CAAC,YAAY,CAAC,CAAQ,CAAC,EAAI,CAAE,CAAO,CAAC,EAAI,CAAE,EAAQ,IACzE,AAAU,IAAV,GACV,CAAA,CAAQ,CAAC,EAAI,CAAG,CAAO,CAAC,EAAI,AAAJ,EAG3B,CAEA,OADA,OAAO,MAAM,CAAC,GAAW,CAAC,EAAG,GACtB,CACR,CAOA,OAAQ,CACP,OAAO,KAAK,GAAG,EAChB,CAOA,SAAU,CACT,OAAO,IAAI,CAAC,IAAI,AACjB,CAOA,gBAAiB,CAChB,OAAO,IAAI,CAAC,WAAW,AACxB,CAQA,SAAS,CAAI,CAAE,CACd,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAI,IAAI,CAAC,QAAQ,CAAC,EAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAK,EAAK,MAAM,AACtG,CAQA,UAAU,CAAI,CAAE,CAAM,CAAE,CACnB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GACjC,EACH,EAAK,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAEjD,EAAK,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAGtD,EAAK,MAAM,CAAG,CACf,CASA,SAAS,CAAI,CAAE,CAAO,CAAE,CACvB,GAAI,CAAC,GAAQ,CAAC,GAAW,MAAM,OAAO,CAAC,IAAY,CAAC,EAAQ,MAAM,CACjE,MAAO,CAAA,EAER,GAAI,MAAM,OAAO,CAAC,GACjB,CAAA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,IACnC,GAAI,EAAK,SAAS,CAAC,QAAQ,CAAC,CAAO,CAAC,EAAE,EACrC,MAAO,CAAA,CAET,MACM,GAAI,EAAK,SAAS,CAAC,QAAQ,CAAC,GAClC,MAAO,CAAA,EAER,MAAO,CAAA,CACR,CAKA,WAAY,CAIP,aAAc,QAAU,CAAC,SAAS,SAAS,CAAC,OAAO,EACtD,CAAA,SAAS,SAAS,CAAC,OAAO,CAAG,SAAU,CAAQ,CAAE,CAAO,EACvD,EAAU,GAAW,OACrB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,MAAM,CAAE,IAChC,EAAS,IAAI,CAAC,EAAS,IAAI,CAAC,EAAE,CAAE,EAAG,IAAI,CAEzC,CAAA,EAKG,AAAyB,YAAzB,OAAO,OAAO,MAAM,EAEvB,OAAO,cAAc,CAAC,OAAQ,SAAU,CACvC,MAAO,SAAgB,CAAM,CAAE,CAAO,EACrC,GAAI,MAAA,EACH,MAAM,AAAI,UAAU,8CAGrB,IAAI,EAAK,OAAO,GAEhB,IAAK,IAAI,EAAI,EAAG,EAAI,UAAU,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAa,SAAS,CAAC,EAAE,CAE7B,GAAI,MAAA,EACH,IAAK,IAAI,KAAW,EAEf,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,EAAY,IACpD,CAAA,CAAE,CAAC,EAAQ,CAAG,CAAU,CAAC,EAAQ,AAAR,CAI7B,CACA,OAAO,CACR,EACA,SAAU,CAAA,EACV,aAAc,CAAA,CACf,EAEF,CACD,C","sources":["<anon>","src/app.js","src/boringmenu.js"],"sourcesContent":["(function () {\n'use strict';\nclass $a5e99472fe0a1cd2$export$2e2bcd8739ae039 {\n    /**\n\t * Constructor\n\t *\n\t * @param {Object} options Options for an instance of boringmenu\n\t */ constructor(options = {}){\n        // Default options\n        this.defaultOptions = {\n            selectors: {\n                menu: '.boringmenu',\n                item: ':scope > li'\n            },\n            classes: {\n                item: 'boringmenu__item',\n                itemActive: 'boringmenu__item--active',\n                itemParent: 'boringmenu__item--parent',\n                toggle: 'boringmenu__toggle',\n                toggleTextContainer: 'boringmenu__sr-only',\n                hidden: ''\n            },\n            labels: {\n                'menu.open': 'Open',\n                'menu.close': 'Close'\n            },\n            icons: {\n                'menu.open': 'fas fa-plus',\n                'menu.close': 'fas fa-times'\n            },\n            id: 'boringmenu-' + this.getID(),\n            mode: 'default',\n            path: ''\n        };\n        // Polyfills for IE11\n        this.polyfills();\n        // Merge our provided options with defaults\n        this.options = this.mergeOptions(options);\n        // In case of class options, convert all values to arrays for consistency\n        if (this.options.classes) Object.keys(this.options.classes).forEach((key)=>{\n            if (typeof this.options.classes[key] === 'string') this.options.classes[key] = this.options.classes[key].split(' ');\n            else if (!Array.isArray(this.options.classes[key])) this.options.classes[key] = [];\n        });\n        // Find menu element and bail out early if none found\n        this.menu = document.querySelector(this.options.selectors.menu);\n        if (!this.menu) {\n            // Trigger the init done event in case some third party is waiting for this to happen\n            document.dispatchEvent(new CustomEvent('boringmenu-init-done'));\n            return;\n        }\n        // Set root menu depth\n        this.menu.setAttribute('data-boringmenu-depth', 1);\n        // Running counter for menu num\n        this.menuNum = 0;\n        // Menu object stash\n        this.menuObjects = [\n            this.menu\n        ];\n        // Merge menu options with existing options\n        if (this.menu.getAttribute('data-boringmenu')) try {\n            this.options = this.mergeOptions(JSON.parse(this.menu.getAttribute('data-boringmenu'), this.options));\n        } catch (e) {}\n        // Add active and parent classes\n        this.addClasses(this.menu, this.options.classes);\n        // Find submenu elements and create toggles\n        this.findSubMenus(this.menu);\n        // Trigger event when menu has been initialized\n        this.menu.dispatchEvent(new CustomEvent('boringmenu-init-done', {\n            bubbles: true,\n            cancelable: true\n        }));\n    }\n    /**\n\t * Add active and parent classes\n\t *\n\t * @param {Object} menu\n\t * @param {Object} classes\n\t */ addClasses(menu, classes) {\n        const currentPath = this.options.path || window.location.pathname.replace(/\\/$/, '') + '/';\n        const itemsSelector = classes.item.map((itemClass)=>'.' + itemClass + '[href=\"' + currentPath + '\"]');\n        menu.querySelectorAll(itemsSelector.join(', ')).forEach((item)=>{\n            item.classList.add(...classes.itemActive);\n            item = item.parentNode;\n            while(item.parentNode){\n                item = item.parentNode;\n                if (item.tagName == 'LI') {\n                    const childItem = item.firstElementChild;\n                    if (childItem !== null && this.hasClass(childItem, classes.item) && !this.hasClass(childItem, classes.itemActive)) childItem.classList.add(...classes.itemParent);\n                } else if (item.matches(this.options.selectors.menu)) break;\n            }\n        });\n    }\n    /**\n\t * Find submenu elements and create toggles\n\t *\n\t * @param {Object} menu\n\t * @param {Number} depth\n\t */ findSubMenus(menu, depth = 2) {\n        menu.querySelectorAll(this.options.selectors.item).forEach((item)=>{\n            // Look for a submenu, bail out early if none found\n            const submenu = item.querySelector('ul');\n            if (!submenu) return;\n            // Add unique ID and keep track of depth\n            this.menuNum++;\n            submenu.setAttribute('id', this.options.id + '-' + this.menuNum);\n            submenu.setAttribute('data-boringmenu-depth', depth);\n            // Hide menu\n            if (!this.hasClass(item, this.options.classes.itemActive) && !item.querySelector('.' + this.options.classes.itemActive)) this.setHidden(submenu, true);\n            // Insert toggle button before menu item\n            submenu.parentNode.insertBefore(this.getToggle(submenu), submenu);\n            // Store menu in stash\n            this.menuObjects.push(submenu);\n            // Find nested submenu elements\n            this.findSubMenus(submenu, depth + 1);\n        });\n    }\n    /**\n\t * Helper function for displaying or hiding a menu\n\t *\n\t * @param {Object} menu\n\t * @param {Object} menuToggle\n\t * @param {Object} menuToggleText\n\t * @param {(Object|null)} menuToggleIcon\n\t * @param {boolean} hiddenState\n\t * @param {boolean} triggerEvent\n\t * @param {boolean} isRecursive\n\t */ toggleMenu(menu, menuToggle, menuToggleText, menuToggleIcon, hiddenState, triggerEvent = true, isRecursive = false) {\n        this.setHidden(menu, hiddenState);\n        menu.menuToggleIcon = menu.menuToggleIcon || null;\n        menuToggle.setAttribute('aria-expanded', !this.isHidden(menu));\n        menuToggleText.nodeValue = this.options.labels[this.isHidden(menu) ? 'menu.open' : 'menu.close'];\n        if (menuToggleIcon != null) {\n            menu.menuToggleIcon = this.getToggleIcon(menu);\n            menuToggleIcon.parentNode.replaceChild(menu.menuToggleIcon, menuToggleIcon);\n        }\n        if (!isRecursive && this.options.mode === 'accordion') this.menuObjects.forEach((menuObject)=>{\n            if (menuObject.id === menu.id || this.isHidden(menuObject) || menuObject.contains(menu) || !menuObject.menuToggle) return;\n            this.toggleMenu(menuObject, menuObject.menuToggle, menuObject.menuToggleText, menuObject.menuToggleIcon, true, true, true);\n        });\n        if (triggerEvent) this.menu.dispatchEvent(new CustomEvent('boringmenu-menu-toggle-done', {\n            bubbles: true,\n            cancelable: true,\n            detail: {\n                'menu': menu,\n                'menuDepth': menu.getAttribute('data-boringmenu-depth')\n            }\n        }));\n    }\n    /**\n\t * Get menu toggle element (button)\n\t *\n\t * @param {Object} submenu\n\t * @returns {Object}\n\t */ getToggle(submenu) {\n        // Create menu toggle button\n        const menuToggle = document.createElement('button');\n        menuToggle.classList.add(...this.options.classes.toggle);\n        menuToggle.setAttribute('aria-haspopup', 'true');\n        menuToggle.setAttribute('aria-expanded', !this.isHidden(submenu));\n        menuToggle.setAttribute('aria-controls', submenu.getAttribute('id'));\n        // Add text within container\n        const menuToggleTextContainer = document.createElement('span');\n        if (this.options.classes.toggleTextContainer) menuToggleTextContainer.classList.add(...this.options.classes.toggleTextContainer);\n        menuToggle.appendChild(menuToggleTextContainer);\n        const menuToggleText = document.createTextNode(this.options.labels[this.isHidden(submenu) ? 'menu.open' : 'menu.close']);\n        menuToggleTextContainer.appendChild(menuToggleText);\n        // Add icon (optional)\n        let menuToggleIcon = this.getToggleIcon(submenu);\n        if (menuToggleIcon != null) menuToggle.appendChild(menuToggleIcon);\n        // Store references to toggle objects in menu\n        submenu.menuToggle = menuToggle;\n        submenu.menuToggleText = menuToggleText;\n        submenu.menuToggleIcon = menuToggleIcon;\n        // Add click event listener\n        menuToggle.addEventListener('click', (event)=>{\n            event.stopPropagation();\n            this.toggleMenu(submenu, submenu.menuToggle, submenu.menuToggleText, submenu.menuToggleIcon, !this.isHidden(submenu));\n        });\n        // Add keydown event listener\n        menuToggle.addEventListener('keydown', (event)=>{\n            let hiddenState;\n            // 40 = down, 38 = up, 13 = enter, 32 = space\n            if ([\n                40,\n                38,\n                13,\n                32\n            ].indexOf(event.keyCode) > -1) {\n                event.preventDefault();\n                hiddenState = event.keyCode === 40 ? false : event.keyCode === 38 ? true : !this.isHidden(submenu);\n                this.toggleMenu(submenu, submenu.menuToggle, submenu.menuToggleText, submenu.menuToggleIcon, hiddenState);\n            }\n        });\n        return menuToggle;\n    }\n    /**\n\t * Get menu toggle icon\n\t *\n\t * @param {Object} submenu\n\t * @param {(Object|null)} menuToggleIcon\n\t * @returns {(Object|null)}\n\t */ getToggleIcon(submenu, menuToggleIcon) {\n        menuToggleIcon = menuToggleIcon || null;\n        if (this.options.icons['menu.open'] && this.options.icons['menu.close']) {\n            menuToggleIcon = this.options.icons[this.isHidden(submenu) ? 'menu.open' : 'menu.close'];\n            if (typeof menuToggleIcon == 'string') {\n                const menuToggleIconClass = menuToggleIcon;\n                menuToggleIcon = document.createElement('i');\n                menuToggleIcon.setAttribute('aria-hidden', true);\n                menuToggleIcon.classList.add(...menuToggleIconClass.split(' '));\n            } else if (Array.isArray(menuToggleIcon)) {\n                menuToggleIcon = document.createElement('i');\n                menuToggleIcon.setAttribute('aria-hidden', true);\n                menuToggleIcon.classList.add(...menuToggleIcon);\n            } else if (typeof menuToggleIcon == 'object' && typeof menuToggleIcon.cloneNode == 'function') menuToggleIcon = menuToggleIcon.cloneNode(true);\n            else if (typeof menuToggleIcon == 'function') menuToggleIcon = menuToggleIcon(submenu, submenu.getAttribute('data-boringmenu-depth'));\n        }\n        return menuToggleIcon;\n    }\n    /**\n\t * Merge array of new options with default options\n\t *\n\t * @param {Object} options\n\t * @param {(Object|null)} defaults\n\t * @param {Number} depth\n\t * @returns {Object}\n\t */ mergeOptions(options, defaults, depth = 1) {\n        if (defaults == null) defaults = this.defaultOptions;\n        let keys = Object.keys(options);\n        if (!keys.length) return defaults;\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i];\n            if (defaults[key] !== null) {\n                if (typeof defaults[key] === 'object') Object.assign(options[key], this.mergeOptions(defaults[key], options[key], depth + 1));\n                else if (depth === 1) defaults[key] = options[key];\n            }\n        }\n        Object.assign(options || {}, defaults);\n        return options;\n    }\n    /**\n\t * Get (mostly) unique identifier\n\t *\n\t * @returns {Number}\n\t */ getID() {\n        return Date.now();\n    }\n    /**\n\t * Get root menu object\n\t *\n\t * @returns {Object}\n\t */ getMenu() {\n        return this.menu;\n    }\n    /**\n\t * Get array of all menu objects\n\t *\n\t * @returns {Object}\n\t */ getMenuObjects() {\n        return this.menuObjects;\n    }\n    /**\n\t * Check if menu is hidden\n\t *\n\t * @param {Object} menu\n\t * @returns {boolean}\n\t */ isHidden(menu) {\n        return this.options.classes.hidden && this.hasClass(menu, this.options.classes.hidden) || menu.hidden;\n    }\n    /**\n\t * Set menu hidden\n\t *\n\t * @param {Object} menu\n\t * @param {boolean} hidden\n\t */ setHidden(menu, hidden) {\n        if (this.options.classes.hidden.length) {\n            if (hidden) menu.classList.add(...this.options.classes.hidden);\n            else menu.classList.remove(...this.options.classes.hidden);\n        }\n        menu.hidden = hidden;\n    }\n    /**\n\t * Check if item contains given class (single string value) or classes (array)\n\t *\n\t * @param {Object} item\n\t * @param {(string|Array)} classes\n\t * @returns {boolean}\n\t */ hasClass(item, classes) {\n        if (!item || !classes || Array.isArray(classes) && !classes.length) return false;\n        if (Array.isArray(classes)) for(let i = 0; i < classes.length; i++){\n            if (item.classList.contains(classes[i])) return true;\n        }\n        else if (item.classList.contains(classes)) return true;\n        return false;\n    }\n    /**\n\t * Initialize polyfills\n\t */ polyfills() {\n        // Polyfill NodeList.forEach (IE11)\n        // https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\n        if ('NodeList' in window && !NodeList.prototype.forEach) NodeList.prototype.forEach = function(callback, thisArg) {\n            thisArg = thisArg || window;\n            for(let i = 0; i < this.length; i++)callback.call(thisArg, this[i], i, this);\n        };\n        // Polyfill Object.assign (IE11)\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n        if (typeof Object.assign !== 'function') // Must be writable: true, enumerable: false, configurable: true\n        Object.defineProperty(Object, \"assign\", {\n            value: function assign(target, varArgs) {\n                if (target === null || target === undefined) throw new TypeError('Cannot convert undefined or null to object');\n                let to = Object(target);\n                for(let i = 1; i < arguments.length; i++){\n                    let nextSource = arguments[i];\n                    if (nextSource !== null && nextSource !== undefined) {\n                        for(let nextKey in nextSource)// Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) to[nextKey] = nextSource[nextKey];\n                    }\n                }\n                return to;\n            },\n            writable: true,\n            configurable: true\n        });\n    }\n}\n\n\nwindow.boringmenu = (0, $a5e99472fe0a1cd2$export$2e2bcd8739ae039);\n\n})();\n//# sourceMappingURL=boringmenu.min.js.map\n","import boringmenu from './boringmenu.js';\n\nwindow.boringmenu = boringmenu;\n","'use strict';\n\n/**\n * boringmenu.js\n *\n * @version 0.4.0\n */\nexport default class boringmenu {\n\n\t/**\n\t * Constructor\n\t *\n\t * @param {Object} options Options for an instance of boringmenu\n\t */\n\tconstructor(options = {}) {\n\n\t\t// Default options\n\t\tthis.defaultOptions = {\n\t\t\tselectors: {\n\t\t\t\tmenu: '.boringmenu',\n\t\t\t\titem: ':scope > li',\n\t\t\t},\n\t\t\tclasses: {\n\t\t\t\titem: 'boringmenu__item',\n\t\t\t\titemActive: 'boringmenu__item--active',\n\t\t\t\titemParent: 'boringmenu__item--parent',\n\t\t\t\ttoggle: 'boringmenu__toggle',\n\t\t\t\ttoggleTextContainer: 'boringmenu__sr-only',\n\t\t\t\thidden: '',\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\t'menu.open': 'Open',\n\t\t\t\t'menu.close': 'Close',\n\t\t\t},\n\t\t\ticons: {\n\t\t\t\t'menu.open': 'fas fa-plus',\n\t\t\t\t'menu.close': 'fas fa-times',\n\t\t\t},\n\t\t\tid: 'boringmenu-' + this.getID(),\n\t\t\tmode: 'default',\n\t\t\tpath: '',\n\t\t}\n\n\t\t// Polyfills for IE11\n\t\tthis.polyfills();\n\n\t\t// Merge our provided options with defaults\n\t\tthis.options = this.mergeOptions(options);\n\n\t\t// In case of class options, convert all values to arrays for consistency\n\t\tif (this.options.classes) {\n\t\t\tObject.keys(this.options.classes).forEach((key) => {\n\t\t\t\tif (typeof this.options.classes[key] === 'string') {\n\t\t\t\t\tthis.options.classes[key] = this.options.classes[key].split(' ');\n\t\t\t\t} else if (!Array.isArray(this.options.classes[key])) {\n\t\t\t\t\tthis.options.classes[key] = [];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Find menu element and bail out early if none found\n\t\tthis.menu = document.querySelector(this.options.selectors.menu);\n\t\tif (!this.menu) {\n\t\t\t// Trigger the init done event in case some third party is waiting for this to happen\n\t\t\tdocument.dispatchEvent(new CustomEvent('boringmenu-init-done'));\n\t\t\treturn;\n\t\t}\n\n\t\t// Set root menu depth\n\t\tthis.menu.setAttribute('data-boringmenu-depth', 1);\n\n\t\t// Running counter for menu num\n\t\tthis.menuNum = 0;\n\n\t\t// Menu object stash\n\t\tthis.menuObjects = [this.menu];\n\n\t\t// Merge menu options with existing options\n\t\tif (this.menu.getAttribute('data-boringmenu')) {\n\t\t\ttry {\n\t\t\t\tthis.options = this.mergeOptions(JSON.parse(this.menu.getAttribute('data-boringmenu'), this.options));\n\t\t\t} catch(e) {};\n\t\t}\n\n\t\t// Add active and parent classes\n\t\tthis.addClasses(this.menu, this.options.classes);\n\n\t\t// Find submenu elements and create toggles\n\t\tthis.findSubMenus(this.menu);\n\n\t\t// Trigger event when menu has been initialized\n\t\tthis.menu.dispatchEvent(new CustomEvent('boringmenu-init-done', {\n\t\t\tbubbles: true,\n\t\t\tcancelable: true\n\t\t}));\n\t}\n\n\t/**\n\t * Add active and parent classes\n\t *\n\t * @param {Object} menu\n\t * @param {Object} classes\n\t */\n\taddClasses(menu, classes) {\n\t\tconst currentPath = this.options.path || window.location.pathname.replace(/\\/$/, '') + '/';\n\t\tconst itemsSelector = classes.item.map(itemClass => '.' + itemClass + '[href=\"' + currentPath + '\"]');\n\t\tmenu.querySelectorAll(itemsSelector.join(', ')).forEach(item => {\n\t\t\titem.classList.add(...classes.itemActive);\n\t\t\titem = item.parentNode;\n\t\t\twhile (item.parentNode) {\n\t\t\t\titem = item.parentNode;\n\t\t\t\tif (item.tagName == 'LI') {\n\t\t\t\t\tconst childItem = item.firstElementChild;\n\t\t\t\t\tif (childItem !== null && this.hasClass(childItem, classes.item) && !this.hasClass(childItem, classes.itemActive)) {\n\t\t\t\t\t\tchildItem.classList.add(...classes.itemParent);\n\t\t\t\t\t}\n\t\t\t\t} else if (item.matches(this.options.selectors.menu)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Find submenu elements and create toggles\n\t *\n\t * @param {Object} menu\n\t * @param {Number} depth\n\t */\n\tfindSubMenus(menu, depth = 2) {\n\t\tmenu.querySelectorAll(this.options.selectors.item).forEach((item) => {\n\n\t\t\t// Look for a submenu, bail out early if none found\n\t\t\tconst submenu = item.querySelector('ul');\n\t\t\tif (!submenu) return;\n\n\t\t\t// Add unique ID and keep track of depth\n\t\t\tthis.menuNum++;\n\t\t\tsubmenu.setAttribute('id', this.options.id + '-' + this.menuNum);\n\t\t\tsubmenu.setAttribute('data-boringmenu-depth', depth);\n\n\t\t\t// Hide menu\n\t\t\tif (!this.hasClass(item, this.options.classes.itemActive) && !item.querySelector('.' + this.options.classes.itemActive)) {\n\t\t\t\tthis.setHidden(submenu, true);\n\t\t\t}\n\n\t\t\t// Insert toggle button before menu item\n\t\t\tsubmenu.parentNode.insertBefore(this.getToggle(submenu), submenu);\n\n\t\t\t// Store menu in stash\n\t\t\tthis.menuObjects.push(submenu);\n\n\t\t\t// Find nested submenu elements\n\t\t\tthis.findSubMenus(submenu, depth + 1);\n\t\t});\n\t}\n\n\t/**\n\t * Helper function for displaying or hiding a menu\n\t *\n\t * @param {Object} menu\n\t * @param {Object} menuToggle\n\t * @param {Object} menuToggleText\n\t * @param {(Object|null)} menuToggleIcon\n\t * @param {boolean} hiddenState\n\t * @param {boolean} triggerEvent\n\t * @param {boolean} isRecursive\n\t */\n\ttoggleMenu(menu, menuToggle, menuToggleText, menuToggleIcon, hiddenState, triggerEvent = true, isRecursive = false) {\n\t\tthis.setHidden(menu, hiddenState);\n\t\tmenu.menuToggleIcon = menu.menuToggleIcon || null;\n\t\tmenuToggle.setAttribute('aria-expanded', !this.isHidden(menu));\n\t\tmenuToggleText.nodeValue = this.options.labels[this.isHidden(menu) ? 'menu.open' : 'menu.close'];\n\t\tif (menuToggleIcon != null) {\n\t\t\tmenu.menuToggleIcon = this.getToggleIcon(menu);\n\t\t\tmenuToggleIcon.parentNode.replaceChild(menu.menuToggleIcon, menuToggleIcon);\n\t\t}\n\t\tif (!isRecursive && this.options.mode === 'accordion') {\n\t\t\tthis.menuObjects.forEach(menuObject => {\n\t\t\t\tif (menuObject.id === menu.id || this.isHidden(menuObject) || menuObject.contains(menu) || !menuObject.menuToggle) return;\n\t\t\t\tthis.toggleMenu(menuObject, menuObject.menuToggle, menuObject.menuToggleText, menuObject.menuToggleIcon, true, true, true);\n\t\t\t});\n\t\t}\n\t\tif (triggerEvent) {\n\t\t\tthis.menu.dispatchEvent(new CustomEvent('boringmenu-menu-toggle-done', {\n\t\t\t\tbubbles: true,\n\t\t\t\tcancelable: true,\n\t\t\t\tdetail: {\n\t\t\t\t\t'menu': menu,\n\t\t\t\t\t'menuDepth': menu.getAttribute('data-boringmenu-depth'),\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\t/**\n\t * Get menu toggle element (button)\n\t *\n\t * @param {Object} submenu\n\t * @returns {Object}\n\t */\n\tgetToggle(submenu) {\n\n\t\t// Create menu toggle button\n\t\tconst menuToggle = document.createElement('button');\n\t\tmenuToggle.classList.add(...this.options.classes.toggle);\n\t\tmenuToggle.setAttribute('aria-haspopup', 'true');\n\t\tmenuToggle.setAttribute('aria-expanded', !this.isHidden(submenu));\n\t\tmenuToggle.setAttribute('aria-controls', submenu.getAttribute('id'));\n\n\t\t// Add text within container\n\t\tconst menuToggleTextContainer = document.createElement('span');\n\t\tif (this.options.classes.toggleTextContainer) {\n\t\t\tmenuToggleTextContainer.classList.add(...this.options.classes.toggleTextContainer);\n\t\t}\n\t\tmenuToggle.appendChild(menuToggleTextContainer);\n\t\tconst menuToggleText = document.createTextNode(this.options.labels[this.isHidden(submenu) ? 'menu.open' : 'menu.close']);\n\t\tmenuToggleTextContainer.appendChild(menuToggleText);\n\n\t\t// Add icon (optional)\n\t\tlet menuToggleIcon = this.getToggleIcon(submenu);\n\t\tif (menuToggleIcon != null) {\n\t\t\tmenuToggle.appendChild(menuToggleIcon);\n\t\t}\n\n\t\t// Store references to toggle objects in menu\n\t\tsubmenu.menuToggle = menuToggle;\n\t\tsubmenu.menuToggleText = menuToggleText;\n\t\tsubmenu.menuToggleIcon = menuToggleIcon;\n\n\t\t// Add click event listener\n\t\tmenuToggle.addEventListener('click', (event) => {\n\t\t\tevent.stopPropagation();\n\t\t\tthis.toggleMenu(submenu, submenu.menuToggle, submenu.menuToggleText, submenu.menuToggleIcon, !this.isHidden(submenu));\n\t\t});\n\n\t\t// Add keydown event listener\n\t\tmenuToggle.addEventListener('keydown', (event) => {\n\t\t\tlet hiddenState;\n\t\t\t// 40 = down, 38 = up, 13 = enter, 32 = space\n\t\t\tif ([40, 38, 13, 32].indexOf(event.keyCode) > -1) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\thiddenState = event.keyCode === 40 ? false : (event.keyCode === 38 ? true : !this.isHidden(submenu));\n\t\t\t\tthis.toggleMenu(submenu, submenu.menuToggle, submenu.menuToggleText, submenu.menuToggleIcon, hiddenState);\n\t\t\t}\n\t\t});\n\n\t\treturn menuToggle;\n\t}\n\n\t/**\n\t * Get menu toggle icon\n\t *\n\t * @param {Object} submenu\n\t * @param {(Object|null)} menuToggleIcon\n\t * @returns {(Object|null)}\n\t */\n\tgetToggleIcon(submenu, menuToggleIcon) {\n\t\tmenuToggleIcon = menuToggleIcon || null;\n\t\tif (this.options.icons['menu.open'] && this.options.icons['menu.close']) {\n\t\t\tmenuToggleIcon = this.options.icons[this.isHidden(submenu) ? 'menu.open' : 'menu.close'];\n\t\t\tif (typeof menuToggleIcon == 'string') {\n\t\t\t\tconst menuToggleIconClass = menuToggleIcon;\n\t\t\t\tmenuToggleIcon = document.createElement('i');\n\t\t\t\tmenuToggleIcon.setAttribute('aria-hidden', true);\n\t\t\t\tmenuToggleIcon.classList.add(...menuToggleIconClass.split(' '));\n\t\t\t} else if (Array.isArray(menuToggleIcon)) {\n\t\t\t\tmenuToggleIcon = document.createElement('i');\n\t\t\t\tmenuToggleIcon.setAttribute('aria-hidden', true);\n\t\t\t\tmenuToggleIcon.classList.add(...menuToggleIcon);\n\t\t\t} else if (typeof menuToggleIcon == 'object' && typeof menuToggleIcon.cloneNode == 'function') {\n\t\t\t\tmenuToggleIcon = menuToggleIcon.cloneNode(true);\n\t\t\t} else if (typeof menuToggleIcon == 'function') {\n\t\t\t\tmenuToggleIcon = menuToggleIcon(submenu, submenu.getAttribute('data-boringmenu-depth'));\n\t\t\t}\n\t\t}\n\t\treturn menuToggleIcon;\n\t}\n\n\t/**\n\t * Merge array of new options with default options\n\t *\n\t * @param {Object} options\n\t * @param {(Object|null)} defaults\n\t * @param {Number} depth\n\t * @returns {Object}\n\t */\n\tmergeOptions(options, defaults, depth = 1) {\n\t\tif (defaults == null) {\n\t\t\tdefaults = this.defaultOptions;\n\t\t}\n\t\tlet keys = Object.keys(options);\n\t\tif (!keys.length) {\n\t\t\treturn defaults;\n\t\t}\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key = keys[i];\n\t\t\tif (defaults[key] !== null) {\n\t\t\t\tif (typeof defaults[key] === 'object') {\n\t\t\t\t\tObject.assign(options[key], this.mergeOptions(defaults[key], options[key], depth + 1));\n\t\t\t\t} else if (depth === 1) {\n\t\t\t\t\tdefaults[key] = options[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tObject.assign(options || {}, defaults);\n\t\treturn options;\n\t}\n\n\t/**\n\t * Get (mostly) unique identifier\n\t *\n\t * @returns {Number}\n\t */\n\tgetID() {\n\t\treturn Date.now();\n\t}\n\n\t/**\n\t * Get root menu object\n\t *\n\t * @returns {Object}\n\t */\n\tgetMenu() {\n\t\treturn this.menu;\n\t}\n\n\t/**\n\t * Get array of all menu objects\n\t *\n\t * @returns {Object}\n\t */\n\tgetMenuObjects() {\n\t\treturn this.menuObjects;\n\t}\n\n\t/**\n\t * Check if menu is hidden\n\t *\n\t * @param {Object} menu\n\t * @returns {boolean}\n\t */\n\tisHidden(menu) {\n\t\treturn this.options.classes.hidden && this.hasClass(menu, this.options.classes.hidden) || menu.hidden;\n\t}\n\n\t/**\n\t * Set menu hidden\n\t *\n\t * @param {Object} menu\n\t * @param {boolean} hidden\n\t */\n\tsetHidden(menu, hidden) {\n\t\tif (this.options.classes.hidden.length) {\n\t\t\tif (hidden) {\n\t\t\t\tmenu.classList.add(...this.options.classes.hidden);\n\t\t\t} else {\n\t\t\t\tmenu.classList.remove(...this.options.classes.hidden);\n\t\t\t}\n\t\t}\n\t\tmenu.hidden = hidden;\n\t}\n\n\t/**\n\t * Check if item contains given class (single string value) or classes (array)\n\t *\n\t * @param {Object} item\n\t * @param {(string|Array)} classes\n\t * @returns {boolean}\n\t */\n\thasClass(item, classes) {\n\t\tif (!item || !classes || Array.isArray(classes) && !classes.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (Array.isArray(classes)) {\n\t\t\tfor (let i = 0; i < classes.length; i++) {\n\t\t\t\tif (item.classList.contains(classes[i])) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (item.classList.contains(classes)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Initialize polyfills\n\t */\n\tpolyfills() {\n\n\t\t// Polyfill NodeList.forEach (IE11)\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\n\t\tif ('NodeList' in window && !NodeList.prototype.forEach) {\n\t\t\tNodeList.prototype.forEach = function (callback, thisArg) {\n\t\t\t\tthisArg = thisArg || window;\n\t\t\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\t\t\tcallback.call(thisArg, this[i], i, this);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Polyfill Object.assign (IE11)\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\tif (typeof Object.assign !== 'function') {\n\t\t\t// Must be writable: true, enumerable: false, configurable: true\n\t\t\tObject.defineProperty(Object, \"assign\", {\n\t\t\t\tvalue: function assign(target, varArgs) { // .length of function is 2\n\t\t\t\t\tif (target === null || target === undefined) {\n\t\t\t\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t\t\t\t}\n\n\t\t\t\t\tlet to = Object(target);\n\n\t\t\t\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\t\t\t\tlet nextSource = arguments[i];\n\n\t\t\t\t\t\tif (nextSource !== null && nextSource !== undefined) {\n\t\t\t\t\t\t\tfor (let nextKey in nextSource) {\n\t\t\t\t\t\t\t\t// Avoid bugs when hasOwnProperty is shadowed\n\t\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n\t\t\t\t\t\t\t\t\tto[nextKey] = nextSource[nextKey];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn to;\n\t\t\t\t},\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t});\n\t\t}\n\t}\n}\n"],"names":["window","boringmenu","options","defaultOptions","selectors","menu","item","classes","itemActive","itemParent","toggle","toggleTextContainer","hidden","labels","icons","id","getID","mode","path","polyfills","mergeOptions","Object","keys","forEach","key","split","Array","isArray","document","querySelector","dispatchEvent","CustomEvent","setAttribute","menuNum","menuObjects","getAttribute","JSON","parse","e","addClasses","findSubMenus","bubbles","cancelable","currentPath","location","pathname","replace","itemsSelector","map","itemClass","querySelectorAll","join","classList","add","parentNode","tagName","childItem","firstElementChild","hasClass","matches","depth","submenu","setHidden","insertBefore","getToggle","push","toggleMenu","menuToggle","menuToggleText","menuToggleIcon","hiddenState","triggerEvent","isRecursive","isHidden","nodeValue","getToggleIcon","replaceChild","menuObject","contains","detail","createElement","menuToggleTextContainer","appendChild","createTextNode","addEventListener","event","stopPropagation","indexOf","keyCode","preventDefault","menuToggleIconClass","cloneNode","defaults","length","i","assign","Date","now","getMenu","getMenuObjects","remove","NodeList","prototype","callback","thisArg","call","defineProperty","value","target","varArgs","TypeError","to","arguments","nextSource","nextKey","hasOwnProperty","writable","configurable"],"version":3,"file":"boringmenu.min.js.map"}